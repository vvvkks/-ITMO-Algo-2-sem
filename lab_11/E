#include <iostream>
#include <fstream>
#include <vector>
 
using namespace std;
 
struct edge {
    long long v1;
    long long v2;
    long long weight;
};
 
const long long INF = 10000000000000;
 
int main() {
    ifstream fin("negcycle.in");
    ofstream fout("negcycle.out");
    long long n;
    fin >> n;
 
    vector<edge> graph(n);
    vector<long long> dist(n, INF);
    vector<long long> parent(n, -1);
 
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j) {
            int weight;
            fin >> weight;
            graph.push_back({i, j, weight});
        }
 
    dist[0] = 0;
 
    long long start;
    for (int i = 0; i < n; i++)
    {
        start = -1;
        for (edge j : graph)
            if (dist[j.v2] > dist[j.v1] + j.weight) {
                dist[j.v2] = dist[j.v1] + j.weight;
                parent[j.v2] = j.v1;
                start = j.v2;
            }
    }
 
    if (start == -1)
        fout << "NO";
    else
    {
        fout << "YES\n";
        vector<long long> path;
        long long end = start;
 
        for (long long i = 0; i < n; ++i)
            end = parent[end];
 
        for (long long i = end; i != end || path.empty(); i = parent[i])
            path.push_back(i);
 
        path.push_back(end);
        fout << path.size() << "\n";
 
        for (long long i = path.size() - 1; i >= 0; --i)
            fout << path[i] + 1 << " ";
    }
}
